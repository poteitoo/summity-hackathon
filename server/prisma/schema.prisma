generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum DownloadStatus {
  PENDING
  DOWNLOADING
  DOWNLOADED
  FAILED
}

enum TranscribingStatus {
  PENDING
  TRANSCRIBING
  TRANSCRIBED
  FAILED
}

model Video {
  id                  String                      @id @default(uuid())
  title               String?
  description         String?                     @db.LongText
  thumbnail           String?
  tags                String?                     @db.MediumText
  category            String?
  language            String?
  extension           String?
  duration            Int?
  num_speakers        Int?                        @default(1)
  is_embedable        Boolean?                    @default(false)
  is_public           Boolean?                    @default(false)
  video_id            String                      @unique
  download_status     DownloadStatus?             @default(PENDING)
  transcribing_status TranscribingStatus?         @default(PENDING)
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  segments            Transcription_Segment[]
  user_id             String?
  user                User?                       @relation(fields: [user_id], references: [id])
  translations        Transcription_Translation[]

  @@index([user_id])
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  videos    Video[]
}

model Transcription_Segment {
  id       String               @id @default(uuid())
  index    Int
  end      String
  start    String
  text     String               @db.LongText
  speaker  String
  words    Transcription_Word[]
  video    Video?               @relation(fields: [video_id], references: [video_id])
  video_id String?

  @@index([video_id])
}

model Transcription_Word {
  id                       String                 @id @default(uuid())
  index                    Int
  end                      Float
  start                    Float
  word                     String
  transcription_segment    Transcription_Segment? @relation(fields: [transcription_segment_id], references: [id])
  transcription_segment_id String?

  @@index([transcription_segment_id])
}

model Transcription_Translation {
  id       String @id @default(uuid())
  index    Int
  text     String @db.LongText
  language String
  video    Video  @relation(fields: [video_id], references: [video_id])
  video_id String

  @@unique([video_id, language, index])
  @@index([video_id])
}
